import os
import autogen

# Set up your Azure OpenAI configuration
config_list = autogen.config_list_from_json(
    env_or_file="OAI_CONFIG_LIST",
)

gpt4o_mini_config = {
    "cache_seed": 42,  # change the cache_seed for different trials
    "temperature": 0,
    "config_list": config_list,
    "timeout": 180,
}

initializer = autogen.UserProxyAgent(
    name="Init",
)

# coder = autogen.AssistantAgent(
#     name="coder",
#     llm_config=gpt4_config,
#     system_message="""You are the Coder. For a given links you extract all text from html. go recursively at level 2 and fetch html content. You can use any library or tool to extract the text.
# You write python/shell code to solve tasks. Wrap the code in a code block that specifies the script type. The user can't modify your code. So do not suggest incomplete code which requires others to modify. Don't use a code block if it's not intended to be executed by the executor.
# Don't include multiple code blocks in one response. Do not ask others to copy and paste the result. Check the execution result returned by the executor.
# If the result indicates there is an error, fix the error and output the code again. Suggest the full code instead of partial code or code changes. If the error can't be fixed or if the task is not solved even after the code is executed successfully, analyze the problem, revisit your assumption, collect additional info you need, and think of a different approach to try.
# """,
# )
coder = autogen.AssistantAgent(
    name="coder",
    llm_config=gpt4o_mini_config,
    system_message="""You are the Coder. For a given link, extract all text from HTML. Go recursively at level 1 and fetch HTML content. 
    You can use any library or tool to extract the text. 
    Ensure you handle relative URLs by converting them into absolute URLs using `urljoin` and the base URL.
    Write Python or shell code to solve tasks. Wrap the code in a code block that specifies the script type. 
    The user can't modify your code, so do not suggest incomplete code that requires others to modify.
    Don't use a code block if it's not intended to be executed by the executor. 
    Don't include multiple code blocks in one response. Do not ask others to copy and paste the result. 
    Check the execution result returned by the executor. If the result indicates an error, fix the error and output the code again.
    Suggest the full code instead of partial code or code changes. If the error can't be fixed, analyze the problem, revisit your assumptions, collect additional info, and try a different approach.
    """
)

executor = autogen.UserProxyAgent(
    name="executor",
    system_message="Executor. Execute the code written by the Coder and report the result.",
    human_input_mode="NEVER",
    code_execution_config={
        "last_n_messages": 3,
        #"work_dir": "paper",
        "use_docker": False,
    }, 
)

textrefiner = autogen.AssistantAgent(
    name="textrefiner",
    llm_config=gpt4o_mini_config,
    system_message="""You are domain expert. You extract main topic and subtopic from text and remove text which are not directly link to main topic or sub topic. 
    You give more preference to the content extracted from the executor and headers tag h1, h2, h3 but always prefer text which are related to main topic, you use model knowledge to refine text.
    You remove all the text which are not directly link to main topic or sub topic. 
    .""",
)

mindmapexpert = autogen.AssistantAgent(
    name="mindmapexpert",
    llm_config=gpt4o_mini_config,
    system_message="""You are Expert Mind Map Creator. Create mind map json output using knowledge generated by textrefiner. 
    You give more preference to the content extracted from the textrefiner, you use model knowledge to refine mindmap title. You generate JSON response for the mind map having title, short description,html link, childrens.
    You call executor to get addition text data and html link.
    """,
)


# def state_transition(last_speaker, groupchat):
#     messages = groupchat.messages

#     if last_speaker is initializer:
#         # init -> retrieve
#         return coder
#     elif last_speaker is coder:
#         # retrieve: action 1 -> action 2
#         return executor
#     elif last_speaker is executor:
#         if messages[-1]["content"] == "exitcode: 1":
#             # retrieve --(execution failed)--> retrieve
#             return coder
#         else:
#             # retrieve --(execution success)--> research
#             return textrefiner
#     elif last_speaker is textrefiner:
#         if messages[-1]["content"] == "exitcode: 1":
#             # retrieve --(execution failed)--> retrieve
#             return executor
#         else:
#             # retrieve --(execution success)--> research
#             return mindmapexpert        
#     elif last_speaker == mindmapexpert:
#         # research -> end
#         return None

import logging

logging.basicConfig(level=logging.INFO)

def state_transition(last_speaker, groupchat):
    messages = groupchat.messages
    logging.info(f"Last speaker: {last_speaker.name}, Messages: {messages}")

    if last_speaker is initializer:
        return coder
    elif last_speaker is coder:
        return executor
    elif last_speaker is executor:
        if messages[-1]["content"] == "exitcode: 1":
            logging.warning("Execution failed, returning to coder.")
            return coder
        else:
            return textrefiner
    elif last_speaker is textrefiner:
        if messages[-1]["content"] == "exitcode: 1":
            logging.warning("Text refinement failed, returning to executor.")
            return executor
        else:
            return mindmapexpert        
    elif last_speaker == mindmapexpert:
        return None



groupchat = autogen.GroupChat(
    agents=[initializer, coder, executor,textrefiner, mindmapexpert],
    messages=[],
    max_round=4,
    speaker_selection_method=state_transition,
)
manager = autogen.GroupChatManager(groupchat=groupchat, llm_config=gpt4o_mini_config)


initializer.initiate_chat(
    manager,
    message="Topic: https://learn.microsoft.com/en-us/azure/well-architected/reliability/tradeoffs Requirement: generate mindmap json as ouput.",
)
